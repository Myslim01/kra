const { VK, Keyboard, APIRequest } = require('vk-io');
const mongoose = require('mongoose');
const VKCOINAPI = require('node-vkcoinapi');
const { QuestionManager } = require('vk-io-question');
const fs = require('fs')
const config = require('./config.json');
const utils = require('./utils');
const { Qiwi } = require('node-qiwi-promise-api');
const { Db } = require('mongodb');
const { random } = require('colors');
const qiwi = new Qiwi(config.qiwiApiKey);
const questionManager = new QuestionManager();

const vk = new VK({
	token: config.groupToken,
	apiMode: 'parallel_selected',
	apiLimit: 20,
	apiTimeout: 30000,
})

const vkcoin = new VKCOINAPI({
	key: config.vcKey,
	userId: config.vcUID,
	token: config.vcToken,
})

mongoose.connect(config.urlDB, {
	useNewUrlParser: true,
	useUnifiedTopology: true,
})
// Chema

let payment = {
	id: {
		type: Number,
		required: true,
	},
	
	amountrub: Number,
	amountvkc: Number,
	date: Number,
	name: String,
	committed: Boolean,
	uid: Number
}

const Payment = mongoose.model('Payment', payment)

const userSchema = {
	id: {
		type: Number,
		required: true,
	},
	rassilka: {
		type: Boolean,
		required: true,
		default: true
	},
	firstName: {
		type: String,
		required: true,
	},
	qiwi: {
		type: String,
		default: '',
	},
	reposts: [{
		type: Number,
	}],
	isAdmin: {
		type: Boolean,
		required: true,
		default: false,
	},
}

const User = mongoose.model('User', userSchema)

async function getUser (id) {
	let user = await User.findOne({ id })
	if (!user) {
		const { first_name } = (await vk.api.users.get({ user_ids: id }))[0]
		user = new User({
			id, firstName: first_name, rassilka: true
		})
		
		await user.save()
	}
	
	return user
}

function KeybroadPrivate (user) {
	const array = [
		[
			Keyboard.textButton({
				label: 'ü§ë –ö—É–ø–∏—Ç—å VkCoin',
				color: Keyboard.POSITIVE_COLOR,
			}),
			Keyboard.textButton({
				label: 'üí∞ –ü—Ä–æ–¥–∞—Ç—å VkCoin',
				color: Keyboard.NEGATIVE_COLOR,
			}),

		],
		[
			Keyboard.textButton({
				label: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å',
				color: Keyboard.PRIMARY_COLOR,
			}),
		],
		[
			Keyboard.textButton({
				label: 'üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
				color: Keyboard.POSITIVE_COLOR,
			}),
		],
	]
	
	if (user.isAdmin) {
		array.push([
			Keyboard.textButton({
				color: Keyboard.NEGATIVE_COLOR,
				label: '‚ö°–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º',
			}),
		])
	}

	return Keyboard.keyboard(array)
}

const KeyboardProfil = Keyboard.keyboard([
	[
	    Keyboard.textButton({
				label: 'üí∏ –ò–∑–º–µ–Ω–∏—Ç—å QIWI',
				color: Keyboard.POSITIVE_COLOR,
			}),
	    ],
	    [
		Keyboard.textButton({ 
			    label: '–ù–∞–∑–∞–¥', 
			    color: Keyboard.NEGATIVE_COLOR
			}), 
	],
])

const KeyboardAdmin = Keyboard.keyboard([
	[
	    Keyboard.textButton({
				label: 'ü§ë –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—É—Ä—Å–∞',
				color: Keyboard.POSITIVE_COLOR,
			}),
	    ],
	    [
		Keyboard.textButton({ 
			    label: 'üì¢ –ë–æ–Ω—É—Å –∑–∞ —Ä–µ–ø–æ—Å—Ç', 
			    color: Keyboard.PRIMARY_COLOR
			}),
		Keyboard.textButton({ 
			    label: 'üí∞ –°—É–º–º–∞ –±–æ–Ω—É—Å–∞', 
			    color: Keyboard.PRIMARY_COLOR
			}),
		],
		[
        Keyboard.textButton({ 
			    label: 'üí¨ –†–∞—Å—Å—ã–ª–∫–∞', 
			    color: Keyboard.POSITIVE_COLOR
			}),
		],
		[
		Keyboard.textButton({ 
			    label: 'üí∏ –†–µ–∑–µ—Ä–≤', 
			    color: Keyboard.PRIMARY_COLOR
			}),
		],
		[
		Keyboard.textButton({ 
			    label: '–ù–∞–∑–∞–¥', 
			    color: Keyboard.NEGATIVE_COLOR
			}), 
	],
]) 

const KeyboardCancel = Keyboard.keyboard([
	[
		Keyboard.textButton({ label: '–ù–∞–∑–∞–¥', color: Keyboard.NEGATIVE_COLOR }), 
	],
])

// - - - - - –ö–æ–º–∞–Ω–¥—ã –Ω–µ—Ç - - - - - //

vk.updates.setHearFallbackHandler((context) => {
	context.send(`–î–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`, { keyboard: KeybroadPrivate(_users) })
})

// - - - - - –ù–∞—á–∞—Ç—å - - - - - //

vk.updates.hear(/^(—Å—Ç–∞—Ä—Ç|start|–Ω–∞—á–∞—Ç—å|–º–µ–Ω—é|–Ω–∞–∑–∞–¥)/i, async (context) => {
	context.send(`üëë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–¥–∞–∂–∏ –∏ –ø–æ–∫—É–ø–∫–∏ –∫–æ–∏–Ω–æ–≤.

üì§ –ú—ã –ø—Ä–æ–¥–∞—ë–º: ${config.sellCourse}‚ÇΩ –∑–∞ 1 000 000 VkCoin
üì• –ú—ã –ø–æ–∫—É–ø–∞–µ–º: ${config.buyCourse}‚ÇΩ –∑–∞ 1 000 000 VkCoin

‚úÖ –û—Ç–∑—ã–≤—ã –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ - https://m.vk.com/topic-201515712_47953447`, { keyboard: KeybroadPrivate(_users) })
})

// - - - - - –ö—É–ø–∏—Ç—å VkCoin - - - - - //

vk.updates.hear(/^(?:ü§ë\s+)?–∫—É–ø–∏—Ç—å vkcoin/i, async (context) => {
	const qiwiBalance = (await qiwi.getBalance()).accounts[0].balance.amount
	const vkcbalance = await vkcoin.api.getMyBalance()
	let { authInfo: { personId: phone } } = await qiwi.getAccountInfo()
	const balance = await vkcoin.api.getMyBalance()
	
	const sum = await context.question(`üí• –í—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å: ${utils.split(vkcbalance / 1000)} VkCoin

üì§ –ö—É—Ä—Å ${config.sellCourse}‚ÇΩ –∑–∞ 1 000 000 VkCoin
‚ùó–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑ - 1 000 000 VkCoin

üí° –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–∏–Ω–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:`, { keyboard: KeyboardCancel }); // sum.text
	if(sum.text == '–ù–∞–∑–∞–¥') {
		return context.send('‚úÖ –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!', { keyboard: KeybroadPrivate(_users) })
	}
	
	const amount = Number(Number.parseFloat(sum.text.replace(/\s/g, '')).toFixed(3))
	if(!amount || isNaN(amount)) {
		return context.send('–°—É–º–º–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!', { keyboard: KeybroadPrivate(_users) })
	}
	if(balance < amount * 1000) {
		return context.send('üòï –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –Ω–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ VKC –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã —Ç–∞–∫–æ–π —Å—É–º–º—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–∞ –∏–ª–∏ –∫—É–ø–∏—Ç–µ –º–µ–Ω—å—à—É—é —Å—É–º–º—É.',{ keyboard: KeybroadPrivate(_users) })
	}
	if(amount < 1000000) {
	    return context.send('‚ùó–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑ - 1 000 000 VkCoin', { keyboard: KeybroadPrivate(_users)})
	}
	
	const rubles = Math.ceil(((amount / 1000000 * config.sellCourse) + Number.EPSILON) * 100) / 100
	let url = `https://qiwi.com/payment/form/99?currency=643&extra[%27account%27]=${phone}&amountInteger=${rubles.toString().split('.')[0]}&amountFraction=${rubles.toString().split('.')[1]}&extra[%27comment%27]=bc_${context.senderId}&blocked[0]=comment&blocked[1]=account&blocked[2]=sumt`
	let short = (await vk.api.utils.getShortLink({ url })).short_url
	
	await context.send(`‚úÖ –ó–∞–∫–∞–∑ –Ω–∞ ${amount} VkCoin

üí∞ –ö –æ–ø–ª–∞—Ç–µ ${rubles}‚ÇΩ, –ø—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É —Å QIWI –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ: ${short} `, { keyboard: KeybroadPrivate(_users) })
})

// - - - - - –ü—Ä–æ–¥–∞—Ç—å VkCoin - - - - - //

vk.updates.hear(/^(?:üí∞\s+)?–ø—Ä–æ–¥–∞—Ç—å vkcoin/i, async (context) => {
	if(_users.qiwi === '') {
		return context.send('üí≥ –£ –≤–∞—Å –Ω–µ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä QIWI –∫–æ—à–µ–ª—å–∫–∞!', { keyboard: KeybroadPrivate(_users) });
	}
	const qiwiBalance = (await qiwi.getBalance()).accounts[0].balance.amount
	const users = await vkcoin.api.getBalance([Number(context.senderId)]);
	const UsersBalance = users.response[Number(context.senderId)]
	const sum = await context.question(`üí• –ú–æ–∂–µ–º –∫—É–ø–∏—Ç—å: ${utils.split(qiwiBalance / config.buyCourse * 1000000)} VkCoin

üì• –ö—É—Ä—Å ${config.buyCourse}‚ÇΩ –∑–∞ 1 000 000 VkCoin
‚ùó–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø—Ä–æ–¥–∞–∂–∏ - 1 000 000 VkCoin

üí° –í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–∏–Ω–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–æ–¥–∞—Ç—å:`, { keyboard: KeyboardCancel }); // sum.text
	if(sum.text == '–ù–∞–∑–∞–¥') {
		return context.send('‚úÖ –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!', { keyboard: KeybroadPrivate(_users) })
	}
	
	const amount = Number(Number.parseFloat(sum.text.replace(/\s/g, '')).toFixed(3))
	if(!amount || isNaN(amount)) {
		return context.send('–°—É–º–º–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!', { keyboard: KeybroadPrivate(_users) })
	}
	if(amount / 1000000 * config.buyCourse * 0.97 < 1) {
		return context.send(`‚ùó–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ 1‚ÇΩ
		üí∞–í—ã –ø–æ–ª—É—á–∏—Ç–µ: ${(amount / 1000000 * config.buyCourse * 0.97).toFixed(2)}‚ÇΩ (-3% –∫–æ–º–∏—Å—Å–∏—è QIWI –∑–∞ –ø–µ—Ä–µ–≤–æ–¥).`, { keyboard: KeybroadPrivate(_users)} )
	}
	if (qiwiBalance < (amount / 1000000 * config.buyCourse * 0.97).toFixed(2)) {
		return context.send(`üòï –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –Ω–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ RUB –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã —Ç–∞–∫–æ–π —Å—É–º–º—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–∞ –∏–ª–∏ –ø—Ä–æ–¥–∞–π—Ç–µ –º–µ–Ω—å—à—É—é —Å—É–º–º—É.`, { keyboard: KeybroadPrivate(_users) })
	}
	if(amount < 1000000) {
	    return context.send('‚ùó–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø—Ä–æ–¥–∞–∂–∏ - 1 000 000 VkCoin', { keyboard: KeybroadPrivate(_users)})
	}
	const link = await vkcoin.api.getLink(amount * 1000, true)
	await context.send(`üí∞ –í—ã –ø–æ–ª—É—á–∏—Ç–µ ${(amount / 1000000 * config.buyCourse * 0.97).toFixed(2)}‚ÇΩ (-3% –∫–æ–º–∏—Å—Å–∏—è QIWI –∑–∞ –ø–µ—Ä–µ–≤–æ–¥) –Ω–∞ Qiwi +${_users.qiwi}

ü§ë –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ ${amount} VkCoin –ø–æ —Å—Å—ã–ª–∫–µ: ${link}`, { keyboard: KeybroadPrivate(_users) })
})

// - - - - - –ü—Ä–æ—Ñ–∏–ª—å - - - - - //

vk.updates.hear(/^(?:üë§\s+)?–ø—Ä–æ—Ñ–∏–ª—å/i, async (context) => { 
	await context.send(`ü§ë –í–∞—à Qiwi: +${_users.qiwi}`, { keyboard: KeyboardProfil })
})

// - - - - - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è - - - - - //

vk.updates.hear(/^(?:üìä\s+)?–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è/i, async (context) => { 
	const vkcbalance = await vkcoin.api.getMyBalance()
	const qiwiBalance = (await qiwi.getBalance()).accounts[0].balance.amount
	const payments = await Payment.find()
	await context.send(`üì§ –ú—ã –ø—Ä–æ–¥–∞—ë–º: ${config.sellCourse}‚ÇΩ –∑–∞ 1 000 000 VkCoin
üì• –ú—ã –ø–æ–∫—É–ø–∞–µ–º: ${config.buyCourse}‚ÇΩ –∑–∞ 1 000 000 VkCoin

üìâ –ú–æ–∂–µ–º –∫—É–ø–∏—Ç—å: ${utils.split(qiwiBalance / config.buyCourse * 1000000)} VkCoin
üìà –ú–æ–∂–µ–º –ø—Ä–æ–¥–∞—Ç—å: ${utils.split(vkcbalance / 1000)} VkCoin

üìì –û–±–æ—Ä–æ—Ç: ${payments.map(payment => payment.amountvkc).reduce((acc, value) => acc + value).toFixed(2)}
üìì –°–¥–µ–ª–æ–∫: ${payments.length}`, { keyboard: KeybroadPrivate(_users) })
})

// - - - - - –ò–∑–º–µ–Ω–∏—Ç—å Qiwi - - - - - //

vk.updates.hear(/^(?:üí∏\s+)?–∏–∑–º–µ–Ω–∏—Ç—å qiwi/i, async (context) => {
	const number = await context.question(`
‚úÖ –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä QIWI –∫–æ—à–µ–ª—å–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 79XXXXXXXXX
	
‚úè –°–µ–π—á–∞—Å —É–∫–∞–∑–∞–Ω - ${_users.qiwi}
üí∞ –ù–∞ –¥–∞–Ω–Ω—ã–π –∫–æ—à–µ–ª—ë–∫ –±—É–¥—É—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è –≤—ã–ø–ª–∞—Ç—ã.
		
‚ùó–í–∞—à —Å—Ç–∞—Ç—É—Å QIWI –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å '–û—Å–Ω–æ–≤–Ω–æ–π' –∏–ª–∏ –∂–µ –≤—ã—à–µ.`)
	if(isNaN(number.text)) {
		return context.send(`‚ùó–í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–æ–º–µ—Ä –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.`, { keyboard: KeybroadPrivate(_users) })
	}
	const qiwi = number.text.match(/\d+/g).join('')
    _users.qiwi = qiwi
    await _users.save()
	await context.send(`‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —É–∫–∞–∑–∞–ª–∏ –Ω–æ–º–µ—Ä +${qiwi}`, { keyboard: KeybroadPrivate(_users) })
})

// - - - - - –ê–¥–º–∏–Ω–∫–∞ - - - - - //

vk.updates.hear(/^‚ö°–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º/i, async (context) => {
	if (!_users.isAdmin) return
	await context.send(`‚ö°–í—ã–±–µ—Ä–∏ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ!`, { keyboard: KeyboardAdmin })
})

// - - - - - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—É—Ä—Å–∞ - - - - - //

vk.updates.hear(/^ü§ë –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—É—Ä—Å–∞/i, async (context) => {
	if (!_users.isAdmin) return
	await context.send(`ü§ë –í—ã–±–µ—Ä–∏ –∫—É—Ä—Å –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å:`, { keyboard: Keyboard.keyboard([
		[
			Keyboard.textButton({ label: "üí∞ –ö—É—Ä—Å –ø—Ä–æ–¥–∞–∂–∏", color: Keyboard.POSITIVE_COLOR }), 
			Keyboard.textButton({ label: "üí∞ –ö—É—Ä—Å —Å–∫—É–ø–∫–∏", color: Keyboard.POSITIVE_COLOR }), 
		],
		[
            Keyboard.textButton({ label: "–ù–∞–∑–∞–¥", color: Keyboard.NEGATIVE_COLOR }),	
        ]
	])
	})
})

vk.updates.hear(/^üí∞ –∫—É—Ä—Å(\s+–ø—Ä–æ–¥–∞–∂–∏)/i, async (context) => {
	if (!_users.isAdmin) return
	const args = await context.question(`üí∞ –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å –ø—Ä–æ–¥–∞–∂–∏ ${config.sellCourse.toFixed(2)}‚ÇΩ
	‚úÖ –í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –∫—É—Ä—Å:`, { keyboard: KeyboardCancel })
	if(args.text == `–ù–∞–∑–∞–¥`) {
		return context.send(`‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏ —Å–º–µ–Ω—É –∫—É—Ä—Å–∞!`, { keyboard: KeybroadPrivate(_users) })
	}
	const course = Number.parseFloat(args.text)
	if(!course) {
		return context.send(`üòÅ –ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é!`, { keyboard: KeybroadPrivate(_users) })
	}
	config.sellCourse = course 
	fs.writeFileSync('./config.json', JSON.stringify(config, null, 2))
    await context.send(`‚úÖ –ö—É—Ä—Å –ø—Ä–æ–¥–∞–∂–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ ${course}`, { keyboard: KeybroadPrivate(_users) });
})

vk.updates.hear(/^üí∞ –∫—É—Ä—Å(\s+—Å–∫—É–ø–∫–∏)/i, async (context) => {
	if (!_users.isAdmin) return
	const args = await context.question(`üí∞ –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å —Å–∫—É–ø–∫–∏ ${config.buyCourse.toFixed(2)}‚ÇΩ
	‚úÖ –í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –∫—É—Ä—Å:`, { keyboard: KeyboardCancel })
	if(args.text == `–ù–∞–∑–∞–¥`) {
		return context.send(`‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏ —Å–º–µ–Ω—É –∫—É—Ä—Å–∞!`, { keyboard: KeybroadPrivate(_users) })
	}
	const course = Number.parseFloat(args.text)
	if(!course) {
		return context.send(`üòÅ –ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é!`, { keyboard: KeybroadPrivate(_users) })
	}
	config.buyCourse = course 
	fs.writeFileSync('./config.json', JSON.stringify(config, null, 2))
    await context.send(`‚úÖ –ö—É—Ä—Å —Å–∫—É–ø–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ ${course}`, { keyboard: KeybroadPrivate(_users) });
})

// - - - - - –ë–æ–Ω—É—Å –∑–∞ —Ä–µ–ø–æ—Å—Ç - - - - - //

vk.updates.hear(/^(?:\s+)?üì¢ –ë–æ–Ω—É—Å –∑–∞ —Ä–µ–ø–æ—Å—Ç/i, async (context) => {
	if (!_users.isAdmin) return
	const args = await context.question(`üçÄ –¢–µ–∫—É—â–∏–π ID –±–æ–Ω—É—Å–∞: ${config.post}
	‚úÖ –í–≤–µ–¥–∏ –∞–π–¥–∏ –Ω–æ–≤–æ–≥–æ –±–æ–Ω—É—Å–∞:`, { keyboard: KeyboardCancel })
	if(args.text == `–ù–∞–∑–∞–¥`) {
		return context.send(`‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏ —Å–º–µ–Ω—É ID –±–æ–Ω—É—Å–∞!`, { keyboard: KeybroadPrivate(_users) })
	}
	const post_id = Number.parseFloat(args.text)
	if(!post_id) {
		return context.send(`üòÅ –ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é!`, { keyboard: KeybroadPrivate(_users) }, { keyboard: KeybroadPrivate(_users) })
	}
	config.post = post_id 
	fs.writeFileSync('./config.json', JSON.stringify(config, null, 2))
    await context.send(`‚úÖ –ê–π–¥–∏ –ø–æ—Å—Ç–∞ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: ${post_id}`,  { keyboard: KeybroadPrivate(_users) });
})

// - - - - - –°—É–º–º–∞ –±–æ–Ω—É—Å–∞ - - - - - //

vk.updates.hear(/^(?:\s+)?üí∞ –°—É–º–º–∞ –±–æ–Ω—É—Å–∞/i, async (context) => {
	if (!_users.isAdmin) return
	const args = await context.question(`üçÄ –¢–µ–∫—É—â–∞—è —Å—É–º–º–∞ –±–æ–Ω—É—Å–∞: ${config.sumpost}
	‚úÖ –í–≤–µ–¥–∏ –∞–π–¥–∏ –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞:`, { keyboard: KeyboardCancel })
	if(args.text == `–ù–∞–∑–∞–¥`) {
		return context.send(`‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏ —Å–º–µ–Ω—É —Å—É–º–º—ã –±–æ–Ω—É—Å–∞!`, { keyboard: KeybroadPrivate(_users) })
	}
	const post_sum = Number.parseFloat(args.text)
	if(!post_sum) {
		return context.send(`–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:`, { keyboard: KeybroadPrivate(_users) }, { keyboard: KeybroadPrivate(_users) })
	}
	config.sumpost = post_sum
	fs.writeFileSync('./config.json', JSON.stringify(config, null, 2))
    await context.send(`‚úÖ –°—É–º–º–∞ –±–æ–Ω—É—Å–∞ –∏–∑–º–µ–Ω—ë–Ω–∞ –Ω–∞: ${post_sum}`,  { keyboard: KeybroadPrivate(_users) });
})


vk.updates.on('message', async (context, next) => {
	if (context.senderId < 1 || context.isOutbox || context.isGroup) {  
		return; 
	}
	_users = await getUser(context.senderId)
	
	return next()
	
})

// - - - - - –†–∞—Å—Å—ã–ª–∫–∞ - - - - - //

vk.updates.hear(/^(?:üí¨\s+)?–†–∞—Å—Å—ã–ª–∫–∞/i, async (context) => {
if(!_users.isAdmin) return;
let a = await User.find({ rassilka: true })
let qq = 0
for(i in a){
qq += 1
}
const sum = await context.question(`üë• –°–µ–π—á–∞—Å –≤ —Ä–∞—Å—Å—ã–ª–∫–µ: ${qq} —á–µ–ª–æ–≤–µ–∫ \nüí¨ –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:`, { keyboard: Keyboard.keyboard([
	[
		Keyboard.textButton({ label: '–ù–∞–∑–∞–¥', color: Keyboard.NEGATIVE_COLOR }), 
	],
]) })
if(sum.text == '–ù–∞–∑–∞–¥'){
	return await context.send(`‚ö°–í—ã–±–µ—Ä–∏ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.`, { keyboard: Keyboard.keyboard([
        [
			Keyboard.textButton({
				label: 'ü§ë –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—É—Ä—Å–∞',
				color: Keyboard.POSITIVE_COLOR,
			}),
	    ],
	    [
		Keyboard.textButton({ 
			    label: 'üì¢ –ë–æ–Ω—É—Å –∑–∞ —Ä–µ–ø–æ—Å—Ç', 
			    color: Keyboard.PRIMARY_COLOR
			}),
		Keyboard.textButton({ 
			    label: 'üí∞ –°—É–º–º–∞ –±–æ–Ω—É—Å–∞', 
			    color: Keyboard.PRIMARY_COLOR
			}),
		],
		[
        Keyboard.textButton({ 
			    label: 'üí¨ –†–∞—Å—Å—ã–ª–∫–∞', 
			    color: Keyboard.POSITIVE_COLOR
			}),
		],
		[
		Keyboard.textButton({ 
			    label: 'üí∏ –†–µ–∑–µ—Ä–≤', 
			    color: Keyboard.PRIMARY_COLOR
			}),
		],
		[
		Keyboard.textButton({ 
			    label: '–ù–∞–∑–∞–¥', 
			    color: Keyboard.NEGATIVE_COLOR
			}),			
		]
	])
	})
}
const sus = await context.question(`üíå –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –≤–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ. \n\n –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –Ω—É–∂–Ω–æ, –Ω–∞–ø–∏—à–∏—Ç–µ false`)
const su = await context.question(`${sum.text}\n\n ‚ùó –ü—Ä–æ–≤–µ—Ä—å —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏ –Ω–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏ ‚ùó`, { attachment: sus.text, keyboard: Keyboard.keyboard([
	[
		Keyboard.textButton({ label: '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', color: Keyboard.POSITIVE_COLOR }), 
	],
	[
		Keyboard.textButton({ label: '–ù–∞–∑–∞–¥', color: Keyboard.NEGATIVE_COLOR }), 
	],
]) })
if(su.text == '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'){
	context.send(`‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞!\n\n –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç—á—ë—Ç –æ —Ä–∞—Å—Å—ã–ª–∫–µ`, { keyboard: Keyboard.keyboard([
        [
			Keyboard.textButton({
				label: 'ü§ë –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—É—Ä—Å–∞',
				color: Keyboard.POSITIVE_COLOR,
			}),
	    ],
	    [
		Keyboard.textButton({ 
			    label: 'üì¢ –ë–æ–Ω—É—Å –∑–∞ —Ä–µ–ø–æ—Å—Ç', 
			    color: Keyboard.PRIMARY_COLOR
			}),
		Keyboard.textButton({ 
			    label: 'üí∞ –°—É–º–º–∞ –±–æ–Ω—É—Å–∞', 
			    color: Keyboard.PRIMARY_COLOR
			}),
		],
		[
        Keyboard.textButton({ 
			    label: 'üí¨ –†–∞—Å—Å—ã–ª–∫–∞', 
			    color: Keyboard.POSITIVE_COLOR
			}),
		],
		[
		Keyboard.textButton({ 
			    label: 'üí∏ –†–µ–∑–µ—Ä–≤', 
			    color: Keyboard.PRIMARY_COLOR
			}),
		],
		[
		Keyboard.textButton({ 
			    label: '–ù–∞–∑–∞–¥', 
			    color: Keyboard.NEGATIVE_COLOR
			}),			
		]
	])
	})
	let start = Date.now()
	let aqq = 0
    for(i in a){
		vk.api.messages.send({ message: `${sum.text} \n\n‚ùå –ß—Ç–æ–±—ã –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –Ω–µ –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è".`, attachment: sus.text , user_id: a[i].id, random_id: Math.random*999, keyboard: Keyboard.keyboard([ Keyboard.urlButton({ url: "https://m.vk.com/topic-201515712_47953447", label: "–û—Ç–∑—ã–≤—ã", color: Keyboard.POSITIVE_COLOR }), Keyboard.textButton({ label: "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è", color: Keyboard.NEGATIVE_COLOR }) ]).inline(true) })
	    aqq += 1
	}
	context.send(`üìù –û—Ç—á—ë—Ç –æ —Ä–∞—Å—Å—ã–ª–∫–µ:
	‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
	‚åõ –ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏: ${Date.now() - start} –º—Å.
	üîó –í—Å–µ–≥–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: ${aqq} —Å–æ–æ–±—â–µ–Ω–∏–π.
	‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ`, { keyboard: Keyboard.keyboard([
        [
			Keyboard.textButton({
				label: 'ü§ë –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—É—Ä—Å–∞',
				color: Keyboard.POSITIVE_COLOR,
			}),
	    ],
	    [
		Keyboard.textButton({ 
			    label: 'üì¢ –ë–æ–Ω—É—Å –∑–∞ —Ä–µ–ø–æ—Å—Ç', 
			    color: Keyboard.PRIMARY_COLOR
			}),
		Keyboard.textButton({ 
			    label: 'üí∞ –°—É–º–º–∞ –±–æ–Ω—É—Å–∞', 
			    color: Keyboard.PRIMARY_COLOR
			}),
		],
		[
        Keyboard.textButton({ 
			    label: 'üí¨ –†–∞—Å—Å—ã–ª–∫–∞', 
			    color: Keyboard.POSITIVE_COLOR
			}),
		],
		[
		Keyboard.textButton({ 
			    label: 'üí∏ –†–µ–∑–µ—Ä–≤', 
			    color: Keyboard.PRIMARY_COLOR
			}),
		],
		[
		Keyboard.textButton({ 
			    label: '–ù–∞–∑–∞–¥', 
			    color: Keyboard.NEGATIVE_COLOR
			}),		
		]
	])
	})
}
})

vk.updates.hear(/^(?:üí¨\s+)?–û—Ç–ø–∏—Å–∞—Ç—å—Å—è/i, async (context) => {
_users.rassilka = false
await _users.save()
context.send(`üòî –ù–∞–º –æ—á–µ–Ω—å –∂–∞–ª—å, —Ç–µ–ø–µ—Ä—å –≤—ã –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏.`)
})

vk.updates.hear(/^(?:üí¨\s+)?–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è/i, async (context) => {
_users.rassilka = true
await _users.save()
context.send(`üòÑ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É!`)
})

// - - - - - –†–µ–∑–µ—Ä–≤ - - - - - //

vk.updates.hear(/^(?:\s+)?üí∏ –†–µ–∑–µ—Ä–≤/i, async (context) => {
if (!_users.isAdmin) return
const vkcbalance = await vkcoin.api.getMyBalance() 
const coins = await vkcoin.api.formatCoins(vkcbalance) 
const qiwiBalance = (await qiwi.getBalance()).accounts[0].balance.amount
context.send(`
üî• –†–µ–∑–µ—Ä–≤ QIWI: ${qiwiBalance}‚ÇΩ 
üí∞ –†–µ–∑–µ—Ä–≤ VKC: ${coins}`)
})

vk.updates.on('new_wall_repost', async (context) => {
  const user = await User.findOne({ id: context.wall.ownerId })
  if (!user || user.reposts.includes(context.wall.copyHistory[0].id)) return
  const lastPostId = config.post
  if (lastPostId !== context.wall.copyHistory[0].id) return
  let a = await vk.api.groups.isMember({ group_id: 201515712, user_id: context.wall.ownerId })
  if(a == 0){
    return context.send(`üí∞–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ.`)
  }
  user.reposts.push(context.wall.copyHistory[0].id)
  await user.save()
  await vkcoin.api.sendPayment(context.wall.ownerId, config.sumpost * 1000, true)
  await vk.api.messages.send({
    user_id: context.wall.ownerId,
    message: `üöÄ –í—ã –ø–æ–ª—É—á–∏–ª–∏ ${config.sumpost} VkCoin –∑–∞ —Ä–µ–ø–æ—Å—Ç!
‚úÖ –ö–æ–∏–Ω—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –í–∞—à –±–∞–ª–∞–Ω—Å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏!`,
  })
})

vkcoin.updates.startPolling().catch(console.error)
vk.updates.start().catch(console.error)
vk.updates.use(questionManager.middleware);

vkcoin.updates.onTransfer(async (event) => {
	const user = await getUser(event.fromId)
	if (!user) return
	const amount = event.amount / 1000
	if (amount / 1000000 * config.buyCourse * 0.97 < 1) {
		return
	}
	
	if (user.qiwi === '') {
		await vk.api.messages.send({
			user_id: event.fromId,
			message: `‚ùó–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –æ–ø–ª–∞—Ç—É –≤ —Ä–∞–∑–º–µ—Ä–µ ${utils.split(amount)} VkCoin
–ù–æ –Ω–µ —Å–º–æ–≥–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º –¥–µ–Ω—å–≥–∏ —Ç–∞–∫ –∫–∞–∫ —É –≤–∞—Å –Ω–µ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä Qiwi`,
		})
		return
	}
	const { first_name } = (await vk.api.users.get({ user_ids: Number(event.fromId) }))[0]
	const rubAmount = Number((amount / 1000000 * config.buyCourse * 0.97).toFixed(2))
	const phone = user.qiwi
	const options = {
		amount: rubAmount,
		comment: config.paymentComment,
		account: `+${phone}`,
	}
	console.log(first_name)
	let saveDeposit = new Payment({ id: 1, amountrub: rubAmount, committed: false, amountvkc: amount, date: Date.now(), name: first_name, uid: event.fromId })
	try {
		await qiwi.toWallet(options)
		await vk.api.messages.send({
			user_id: event.fromId,
			message: `‚úÖ –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –æ–ø–ª–∞—Ç—É –≤ —Ä–∞–∑–º–µ—Ä–µ ${utils.split(amount)} VkCoin 
üí∞ –ù–∞ –≤–∞—à —Å—á—ë—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ ${utils.split(rubAmount)}‚ÇΩ 

üí¨ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤, —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ –ª—é–¥–∏ –ø–æ–≤–µ—Ä–∏–ª–∏ –≤ –Ω–∞—à—É —á–µ—Å—Ç–Ω–æ—Å—Ç—å: https://m.vk.com/topic-201515712_47953447`,
}).catch((err) => { return console.log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è!`) })
let [us] = await vk.api.users.get({user_id: Number(event.fromId)})
await vk.api.messages.send({
user_id: 540910856,
message: `üí∏ *id${us.id} (${us.first_name}) —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–∞–ª ${utils.split(amount)} VkCoin 
‚úÖ –ï–º—É —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${utils.split(rubAmount)}‚ÇΩ`,
}).catch((err) => { return console.log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è!`) })
		} catch (e) {
		await vk.api.messages.send({
			user_id: event.fromId,
			message: `‚ùó–í–æ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!
–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã!
			`,
		}).catch((err) => { return console.log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è!`) })
	}
	await saveDeposit.save()
})

// --- --- --- --- --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∫–∏–≤–∏ –∏ –æ–ø–ª–∞—Ç–∞ –∫–æ–∏–Ω–æ–≤ --- --- --- --- ---

setInterval(async () => {
    const options = {
		rows: 2,
		operation: 'IN',
		sources: ['QW_RUB'],
	}
    let response = (await qiwi.getOperationHistory(options)).data // –∏—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π
	response.map(async (operation) => {
		let check = await Payment.findOne({ id: Number(operation.txnId) });
		if(check) return operation;
		if(!operation.comment) return;
		if(operation.comment.startsWith("bc_")) {
			let user = await User.findOne({ id: Number(operation.comment.split("bc_")[1]) });
		if(!user) return;
			let id = Number(operation.comment.split("bc_")[1])
			let amount = (operation.sum.amount / config.sellCourse * 1000000).toFixed(2)
			const [us] = (await vk.api.users.get({ user_ids: id }))
			let rubAmount = operation.sum.amount
			try {
				await vkcoin.api.sendPayment(id, amount * 1000, true) // –æ—Ç–ø—Ä–∞–≤–∫–∞ vkc
				await vk.api.messages.send({ user_id: 607742830, message: `üî• *id${us.id} (${us.first_name}) –ø–µ—Ä–µ–≤—ë–ª ${utils.split(rubAmount)}‚ÇΩ \n‚úÖ –ï–º—É —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${utils.split(amount)} VkCoin` }).catch((err) => { return console.log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è!`) })
				await vk.api.messages.send({
					user_id: id,
				message: `‚úÖ –ü–æ—Å—Ç—É–ø–∏–ª –ø–ª–∞—Ç—ë–∂ –≤ —Ä–∞–∑–º–µ—Ä–µ ${utils.split(rubAmount)}‚ÇΩ 
üí∞ –í–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${utils.split(amount)} VKCoin

üí¨ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤, —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ –ª—é–¥–∏ –ø–æ–≤–µ—Ä–∏–ª–∏ –≤ –Ω–∞—à—É —á–µ—Å—Ç–Ω–æ—Å—Ç—å: https://m.vk.com/topic-201515712_47953447` }).catch((err) => { return console.log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è!`) })
				} catch (e) {
				await vk.api.messages.send({
					user_id: id,
					message: `‚ùó–í–æ –≤—Ä–µ–º—è –ø–æ–∫—É–ø–∫–∏ VkCoin –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!
–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã!`, }).catch((err) => { return console.log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è!`) })
			}
	let saveDeposit = new Payment({ id: operation.txnId, amountrub: operation.sum.amount, committed: true, amountvkc: amount, date: Date.now(), name: us.first_name, uid: id })
			await saveDeposit.save()
		}
	})
}, 15000)


console.log(`start`)